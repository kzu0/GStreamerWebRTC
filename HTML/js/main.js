let localStream;
let remoteStream;

let peerConnection;

var ws_server;
var ws_port;
var ws_conn;

let uid = String(Math.floor(Math.random() * 10000))

let configuration = {



    /*
    iceServers:[
        {
            urls:['stun:stun1.1.google.com:19302', 'stun:stun2.1.google.com:19302']
            //urls:['', '']

         
        }
    ]
    */




}



var rtc_configuration = {iceServers: [{urls: "stun:stun.l.google.com:19302"},
                                      {urls: ["turn:webrtc.gstreamer.net", "turns:webrtc.gstreamer.net"],
                                       username: "gstreamer",
                                       credential: "IsGreatWhenYouCanGetItToWork"}]};







function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

//
// Display local video stream on video tag 'user-1'
//
let init = async () => {
    localStream = await navigator.mediaDevices.getUserMedia({video:true, audio:false})
    document.getElementById('user-1').srcObject = localStream
    document.getElementById('peer-connection').value = '192.168.0.229'
    document.getElementById('offer-sdp').value = ''
    document.getElementById('answer-sdp').value = ''
}

//
// Initialize the peer connection
//
let initPeerConnection = async () => {

    console.log('Create Peer Connection')

    //
    // Create the RTCPeerConnection object
    //
    peerConnection = new RTCPeerConnection(rtc_configuration)

    //
    // For now is empty, no tracks are added to the stream yet
    //
    remoteStream = new MediaStream()

    //
    // Play remote stream on remote element
    //
    document.getElementById('user-2').srcObject = remoteStream

    //
    // Adds the tracks from the local stream to the RTCPeerConnection
    //
    if(document.getElementById('send-video-switch').checked) {
        localStream.getTracks().forEach((track) => {
            console.log('Adding track to the RTCPeerConnection')            
            peerConnection.addTrack(track, localStream)
        })
    }   

    //
    // Callback for when a new remote track is created
    //
    peerConnection.ontrack = async (event) => {
        console.log('On track')
        event.streams[0].getTracks().forEach((track) => {
            console.log('addTrack')
            console.log('id' + track.id)
            console.log('kind' + track.kind)
            console.log('contentHint' + track.contentHint)
            remoteStream.addTrack(track)
        })
    }
    
    //
    // This event is called every time an ICE candidate is generated by the STUN server
    // and it is added to the RTCPeerConnection. It will be called multiple times
    //
    peerConnection.onicecandidate = async (event) => {
        if (event.candidate){
            console.log('On ICE candidate')
            document.getElementById('offer-sdp').value = JSON.stringify(peerConnection.localDescription)

            if (ws_conn) {
                ws_conn.send(JSON.stringify(event.candidate));
            }
        }
    }

    //
    // This event is called every time an ICE candidate is generated by the STUN server
    // and it is added to the RTCPeerConnection. It will be called multiple times
    //
    peerConnection.onicegatheringstatechange = async (event) => {
        console.log('On ICE gathering state changed')

        let connection = event.target;
        switch (connection.iceGatheringState) {
            case "gathering":
                console.log('gathering')
                /* collection of candidates has begun */
                break;
            case "complete":
                console.log('complete')
                /* collection of candidates is finished */

                sleep(5000)

                if (ws_conn) {
                    ws_conn.send(JSON.stringify(peerConnection.localDescription))
                    console.log(JSON.stringify(peerConnection.localDescription))
                }
                break;
        }
    }

    if (ws_conn) {
        ws_conn.send("READY");
    }
}

//
// Create SDP answer
//
let createOffer = async () => {

    console.log('Creating Offer')

    let offer = await peerConnection.createOffer()
    await peerConnection.setLocalDescription(offer)

    document.getElementById('offer-sdp').value = JSON.stringify(offer)
}

//
// Create SDP answer
//
let createAnswer = async () => {

    console.log('Creating Answer')

    let offer = document.getElementById('offer-sdp').value
    if(!offer) return alert('Retrieve offer from peer first...')

    offer = JSON.parse(offer)
    await peerConnection.setRemoteDescription(offer)

    let answer = await peerConnection.createAnswer()
    await peerConnection.setLocalDescription(answer)

    document.getElementById('answer-sdp').value = JSON.stringify(answer)
}

//
// Add SDP answer to the offerer
//
let addAnswer = async () => {

    console.log('Adding Answer')

    let answer = document.getElementById('answer-sdp').value
    if(!answer) return alert('Retrieve answer from peer first...')

    answer = JSON.parse(answer)

    peerConnection.setRemoteDescription(answer)
}






//
// Buttons callbacks
//
function onInitPeerConnectionClicked() {    

    if(document.getElementById('use-signaling-server').checked) {
        connectToWs()
    } else {
        initPeerConnection()
    }    
}

function onCreateOfferClicked() {
    createOffer()
}

function onAddIceCandidateClicked() {
    addIceCandidate()
}

function onCreateAnswerClicked() {
    createAnswer()
}

function onAddAnswerClicked() {
    addAnswer()
}





//
// Call to init() function
//
init()






//
// Server callbacks
//
async function onServerOpen(event) {
    console.log("onServerOpen");
    ws_conn.send("HELLO");    
}
async function onServerError(event) {
    console.log("onServerError " + event.data);
}
async function onServerClose(event) {
    console.log("onServerClose");
}
async function onServerMessage (event) {

    if (event.data == "HELLO") {
        initPeerConnection();
        return;
    }
    
    //
    // Handle incoming JSON SDP and ICE messages
    //
    try {
        msg = JSON.parse(event.data);
    } catch (e) {
        if (e instanceof SyntaxError) {
            console.log("Error parsing incoming JSON");
        } else {
            console.log("Unknown error parsing response");
        }
        return;
    }

    if (msg.sdp != null) {
        onIncomingSDP(event.data);
    } else if (msg.ice != null) {
        onIncomingCandidate(event.data);
    } else {
        handleIncomingError("Unknown incoming JSON: " + msg);
    }
}

//
// Connect to the web socket server for signaling
//
let connectToWs = async () => {

    console.log('connectToWs')

    ws_port = ws_port || '8080';
    ws_server = ws_server || document.getElementById('peer-connection').value

    /*
    if (window.location.protocol.startsWith ("file")) {
        ws_server = ws_server || "127.0.0.1";
    } else if (window.location.protocol.startsWith ("http")) {
        ws_server = ws_server || window.location.hostname;
    } else {
        throw new Error ("Don't know how to connect to the signalling server with uri" + window.location);
    }
    */

    var ws_url = 'ws://' + ws_server + ':' + ws_port
    
    ws_conn = new WebSocket(ws_url);
    //ws_conn = new WebSocket('ws://192.168.5.1:8080');
    //ws_conn = new WebSocket('ws://192.168.0.211:8080');
    //ws_conn = new WebSocket('ws://192.168.0.229:8080');
    //ws_conn = new WebSocket('ws://127.0.0.1:8080');

    ws_conn.addEventListener('open', onServerOpen);
    ws_conn.addEventListener('error', onServerError);
    ws_conn.addEventListener('message', onServerMessage);
    ws_conn.addEventListener('close', onServerClose);
}

//
// SDP offer received from peer, set remote description
//
async function onIncomingSDP(sdp) {

    console.log("onIncomingSDP");
    console.log(sdp)

    var offer = JSON.parse(sdp)
    await peerConnection.setRemoteDescription(offer)

    let answer = await peerConnection.createAnswer()
    await peerConnection.setLocalDescription(answer)

    document.getElementById('answer-sdp').value = JSON.stringify(answer)
}

//
// ICE candidate received from peer, add it to the peer connection
//
async function onIncomingCandidate(ice) {

    console.log("onIncomingICE");

    //var candidate = new RTCIceCandidate(ice);
    //await peerConnection.addIceCandidate(candidate)
}

